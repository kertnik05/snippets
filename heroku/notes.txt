heroku login
heroku apps - to see list of apps
heroku config -a <appname> - to see all the configurations
heroku config:set <varname>=<varvalue> - to add new variable 
heroku run bash <appname> - to get the bash of your application
heroku run console -a <appname> - to get to the console 
heroku pg:ifno  <appname>  - to get the postgress database information
heroku logs -t  <appname> - to get the live log of the system
heroku run rake db:mugrate  <appname> - for rails application mugrate

Procfile - commands that are running in heroku
web: node index.js 

app.json - configurable environment variables https://devcenter.heroku.com/articles/app-json-schema
------------------------
heroku create <appname> 
git push heroku master 
heroku open  - to open heroku web 
heroku local web - runs a loval web server 

----------------------
heroku help command_name

heroku logs - to view our applications logs
heroku logs --tail - watch our logs in real time
heroku logs -n 100 - to see the 100 most recent lines, we can use -n
heroku logs -p web - logs to only show a specific process type. Here, we will only see logs from our web dynos:
heroku logs -p web.2 - logs from an individual dyno
heroku logs -p worker - logs worker process
heroku logs --source heroku - logs generated by Heroku or the API
heroku logs --source app - To view logs for only our application, we can set the source to app:
heroku logs --source api - logs from the API
heroku logs -p web --tail - combining logs 
heroku help logs - to get help on how to use logs 

Installing add-ons
heroku addons:list - list of all available Heroku add-ons
heroku addons - to see the currently installed add-ons
heroku addons:add <addonname> - install new addon
heroku addons:docs <addonname> - open addon documenatation
heroku addons:remove <addonname> - remove addon 
heroku addons:upgrade <addonname>:<addonnametier> - upgrading our  add-on to the starter tier
heroku addons:downgrade <addonname>
heroku help addons

Managing environment variables
heroku config - to see a list of all our existing environment variables
heroku config:get <variablename> - To view only the value of a specific variable
heroku config:set -a <varname>=<varvalue> - To set a new variable, we can use set
heroku config:set <varname>=<varvalue>  <varname>=<varvalue> - To set multiple variable
heroku config:unset <varname> - to delete variable 
heroku config:unset <varname> <varname> - to delete multiple variable 

Enabling the maintenance page
heroku maintenance off - to check if maintainance page is enabled
heroku maintenance:on - turn on maintenance page
heroku maintenance:off - turn off maintenance page

Managing releases and rolling back
heroku releases - view all of our releases
heroku releases:info <v1> - to see specific release info
heroku rollback - revert to the previous version of our application 
heroku rollback <v30> - to rollback to specific version
    - git checkout git-sha-here - to view our application's code in the exact state it 

Running one-off tasks and dynos
heroku run ls - to see listing of files in the dyno 
heroku run bash - start up a bash session
heroku run:detached echo "hello heroku" - un tasks in the background using the detached mode. The output of the command goes to our logs rather than the screen
heroku run --size=2X bash - djust the size of the one-off dynos
heroku ps - to see list of running dynos
heroku ps:stop <run.3849> - stopping running dynos

Managing SSH keys
heroku keys - view all of the existing keys in our Heroku account:
heroku keys:remove "7Qr3S/v coutermarsh.mike@gmail.com" - To remove an existing key,
heroku keys:add - look on our machine for a public key (~/.ssh/id_rsa.pub) and upload it
heroku keys:add /path/to/key.pub - if sssh public key not in the default location, try adding a path 

Sharing and collaboration
heroku sharing - To see the current users who have access to our application
heroku sharing:add coutermarshmike@gmail.com - to invite a collaborator, we can use sharing:add
heroku sharing:remove coutermarshmike@gmail.com -  to revoke access to our application

Monitoring load average and memory usage
heroku labs:enable log-runtime-metrics - install the log-runtime-metrics
heroku restart - restart dynos after installation
heroku logs - dynos' resource usage will be printed to our logs
--------------------------------------------------------------------------- 
Chapter 3. Setting Up a Staging Environment
Duplicating an existing application
heroku fork <new-applications-name> - need to be within local heroku folder, and fork the existing project 
heroku fork –a original-application-name new-applications-name - for specific application name, if you are not in the current directory 
heroku fork new-applications-name—region eu - to fork your current project into a different region 

Managing git remotes
git remote -v - verbose listing of our remotes
git push <production,staging,origin, remote name> master 
heroku git:remote—app staging-load-testing—remote staging - set up another git remote for our staging application
git push staging master - deploy code to our staging environment

Deploying with Heroku labs – Pipeline
heroku plugins:install git@github.com:heroku/heroku-pipeline.git - to install the Heroku Pipeline CLI plugin
heroku labs:enable pipelines - to enable pipelines for our Heroku application
heroku pipeline—app staging-application-name  - check the status of our staging pipeline 
heroku pipeline:add production-application-name—app staging-application-name - set our staging application's downstream to our production application
heroku pipeline:diff—app staging-application-name - compare the code between our staging (upstream) and production (downstream) applications
heroku pipeline:promote—app staging-application-name - to promote our staging slug to production
heroku releases—app production-application-name - verify by checking the releases for our production application

Deploying from tags
git tag -a v1.0 -m "Version 1 release. Example of a release tag" - to specify the tag as well as a message that describes it:
git push—tags origin - to push our new tag up to our origin repository(github)
git push -f heroku v1.0^{}:master - to push the tag to Heroku
git tag list - to see all the tags of our repositories

Continuous integration and deployment with Travis CI
gem install travis - to install travis 
touch .travis.yml - To deploy our application to Heroku, we need to provide Travis with a Heroku API key. We can do this by creating a Travis config file in the root directory of our application
travis setup heroku - to configure it for us to deploy to Heroku
cat .travis.yml - to view .travis.yml
    //elling it how to run our application's test suite. If our application uses rspec for testing, we will add the following line to our .travis.yml file:
    deploy:
    provider: heroku
    api_key:
        secure: J8ubqQEwN0eGrN1FdXonp+79fn0OWtvC0cft123
    app: refinery-staging
    on:
        repo: github-name/repository-name
    script: bundle exec rspec
$ git add .travis.yml
$ git commit -m 'Adding Travis configuration
 file'
$ git push origin master
--------------------------------------------------------------------------- 
Chapter 4. Production-ready with Heroku
Managing domains from the command line
heroku domains - to see  list our application's existing domains
heroku domains:add example-domain.com - to add a custom domain to our application
heroku domains:add testing.example-domain.com - add subdomains using the same command
heroku domains:add *.example-domain.com - add subdomains using wildcard
heroku domains:remove example-domain.com - Removing an existing domain
heroku domains:clear - remove all domains 

Enabling preboot for seamless deploys
heroku features:enable preboot - to enable preboot for our application
git push heroku master 

Enabling custom maintenance and error pages
heroku config:set ERROR_PAGE_URL=http://example.com/my_error_page.html  - To set up the error page
heroku config:set MAINTENANCE_PAGE_URL=http://example.com/my_maintenance_page.html - to set MAINTENANCE_PAGE_URL to the location of our maintenance page
heroku maintenance:on - turn on maintenance mode
heroku maintenance:off - turn off maintenance mode 

Setting up a status page
heroku addons:add statuspage - install the add-on statuspage 
heroku addons:open statuspage - open the StatusPage dashboard to configure it. Note: As StatusPage integrates with Heroku, if there are any Heroku service interruptions, our page will update automatically
    To report incidents. 
        - We have two options;
            - we can either create an incident manually through the Incidents tab on the StatusPage dashboard
            - we can use the StatusPage API. - going to Manage Account and look for API key and status page ID 
            https://gist.github.com/mscoutermarsh/1bdd27b11b3a037dce5a
            $ curl https://api.statuspage.io/v1/pages/<page ID goes here>/incidents.json \
                -H "Authorization: OAuth <API token goes here>" \
                -X POST \
                -d "incident[name]=Database outage" \
                -d "incident[status]=identified" \
                -d "incident[wants_twitter_update]=f" \
                -d "incident[message]=We've had a hardware failure. Currently investigating."
        - Learn More: http://doers.statuspage.io/api/v1/
        - alternative to StatusPage: https://elements.heroku.com/addons/statushub

Setting up log draining with LogEntries
heroku addons:add logentries - install the Logentries
heroku addons:open logentries - set up a log drain that will automatically stream our logs to Logentries
    - Logentries will automatically send us alerts when there are errors in our application. 
        We can configure these by clicking on Tags & Alerts on the top navigation bar. 
        The add-on has prepopulated most of the alerts for us.
--------------------------------------------------------------------------- 
Chapter 5. 
Error Monitoring and Logging Tools
heroku status - to get a quick look at Heroku's status or https://status.heroku.com/
heroku config:set LOG_LEVEL=debug - to set our logging level to debug
    - We can set our log level to debug, info, warn, error, fatal, or unknown.
heroku logs --tail - restart our app, and we can watch our logs to see the more verbose debugging output
heroku config:set LOG_LEVEL=error - changing our logging level again
heroku logs --tail 

Storing historical logs with PaperTrail
heroku addons:add papertrail - add PaperTrail to our application 
heroku addons:open papertrail - open it from the command line to take a look at the dashboard
    - configure GUI
    - In GUI search
        - status=404 OR status=500 - to monitor 404 or 500 error
        - "app/postgres" duration - to create a new search for slow queries 
            - Enter slow Queries 

Monitoring uptime with Pingdom
    - Register
        - https://www.pingdom.com/free
        - https://www.idera.com/infrastructure-monitoring-as-a-service

Logging errors with Rollbar
heroku addons:add rollbar - enable the Rollbar add-on
    - gem 'rollbar' - open Gem fiel and add 
        -$ bundle install
        -$ rails generate rollbar 
To complete installation, we'll need to commit our changes to Git and redeploy our application
    $ git add Gemfile
    $ git add Gemfile.lock
    $ git add config/initializers/rollbar.rb
    $ git commit -m 'Adding Rollbar error logging'
    $ git push heroku master
heroku run rake rollbar:test - a testing rake task to our project to simulate an error
heroku addons:open rollbar - open up the Rollbar dashboard
heroku config - to see rollbar settings
To learn more: https://rollbar.com/vs/?v=a
Alternative to Rollbar: https://www.bugsnag.com/

--------------------------------------------------------------------------- 
Chapter 6. Load Testing a Heroku Application
Monitoring dyno performance with Librato
heroku labs:enable log-runtime-metrics - to enable log runtime metrics
heroku restart - restart in order for changes to take effect
heroku addons:add librato - enable Librato and make it start collecting data for us
heroku addons:open librato - aunch the Librato dashboard and take a look at our metrics

Monitoring application performance with New Relic
heroku addons:add newrelic:stark - to install the New Relic add-on. Let's start out with New Relic on the free plan (stark)
gem 'newrelic_rpm' - add to the Gem file
bundle install - to run the gem file
Now, we can commit the changes to Git and push them to Heroku
    $ git add Gemfile
    $ git add Gemfile.lock
    $ git commit -m 'adding new relic'
    $ git push heroku master
We can configure some New Relic settings through environment variables. For starters, let's set our application's name and enable parameter capture:
    $ heroku config:set NEW_RELIC_APP_NAME='Application Name'
    $ heroku config:set NEW_RELIC_CAPTURE_PARAMS=TRUE
open up our application and use it; this will get some data into New Relic by giving it a few requests to record
    $ heroku open
$ heroku addons:open newrelic - launch the New Relic dashboard and take a look at our application's data

Learning to load test with Siege (Siege is an open source application that simulates a massive burst in traffic)
$ curl -O http://download.joedog.org/siege/siege-3.0.7.tar.gz - download siege
Unpack Siege
    $ tar xzvf siege-3.0.7.tar.gz
    $ cd siege-3.0.7
run the following commands to complete the installation:
    $ ./configure
    $ make
    $ make install
$ siege - to run seige 
$ siege http://your-app-name.herokuapp.com 
$ siege -C -  stores its configuration settings
Two ways Set Siege time 
    - Let's set the runtime of our next test to 1 minute. We can do this by opening /usr/local/etc/siegerc and adding the following code:
        - time = 1m
    -  siege http://your-app-name.herokuapp.com -t 1m
$ siege http://your-app-name.herokuapp.com - siege should now run for 1 minute 
$ siege http://your-app-name.herokuapp.com -c 25 - siege the server with 25 concurrent users 
$ siege http://your-app-name.herokuapp.com -c 600 -t 1m
Learn More - http://www.joedog.org/siege-home/
Siege FAQ - http://www.joedog.org/siege-faq/ 

Configuring complex load tests with Siege
$ siege -C 
    - look for the url file and add your site page or pages url
        http://your-app-name.herokuapp.com/
        http://your-app-name.herokuapp.com/posts
        http://your-app-name.herokuapp.com/pages/about
        http://your-app-name.herokuapp.com/posts/new POST firstname=Aaron content=Test 
$ siege -c 100 -t 30s
$ siege -i -c 100 -t 30s - randomaize siege attack 

Load testing from the cloud with Blitz.io
$ heroku addons:add blitz - install blitz 
$ heroku addons:open blitz - to launch the Blitz dashboard.
- Follow GUI Instructions

Testing real-user scenarios with Load Impact (a load-testing tool that will allow us to mimic real-world traffic by creating and testing different user scenarios.)
https://loadimpact.com/
https://chrome.google.com/webstore/detail/load-impact-user-scenario/comniomddgkfgfaebhidfgcjgoecbbda
- Steps
    - Start recording
    - Now, we can start using our application, and the Chrome extension will record everything we do in the browser. 
        Load Impact will repeat these steps later during our load test. 
        Once we're done with the recording, we'll need to open the extension again and click on Stop
    - Once the recording is finished, we'll be brought to a page that shows our actions translated into code. 
        Let's give a descriptive name to our scenario and save it:
    - Let's navigate to the Load Impact dashboard (https://loadimpact.com/test/list); go to Test configurations and click on Create test configuration.
    - We will need to fill in our application's URL and then click on Load test execution plan. 
        Here, we will select the length of our test and the maximum number of virtual users (VUs) that Load Impact will use to run through our scenarios.
    - Next, we'll need to select the scenarios we want our test to use. We will be able to pick from any of the scenarios we generated earlier with the Chrome extension. 
        We can also specify the percentage of users for each scenario as well as the geographical origin of the traffic.
    - Finally, we can start our test by scrolling to the bottom of the page and clicking on Create test configuration and start test. 
        Our test will start running, and we'll immediately see results populating the screen.
--------------------------------------------------------------------------- 
Chapter 9 Using and Administrating Heroku Postgres

Creating and sizing a new database
- Heroku has four database tiers: hobby, standard, premium, and enterprise
    - standard - minimum for production
    - hobby - meant for testing and basic development
    - Premium tier databases have a stand-by database ready and waiting for automatic failover if something ever goes wrong.

Determining data size
- $ heroku pg:info -  determine its data size
    - \l+ - data size of Postgres
- If our data size is 350 MB, then a plan with 1 GB of RAM will be a good fit. 
    - As our application grows, we can always upgrade to a larger database instance as needed.

Connection limits
- $ heroku pg:info
    === HEROKU_POSTGRESQL_GRAY_URL (DATABASE_URL)
    Plan:        Hobby-dev
    Status:      Available
    Connections: 4
    PG Version:  9.3.3
    Created:     2014-07-27 21:01 UTC
- If we are running three workers on each dyno and have five dynos, our application needs a minimum of 15 available connections to run.
- account for any connections that our worker processes will be using and should give ourselves plenty of room for growth
- Selecting and creating the database
    - Create our database
        - https://elements.heroku.com/addons/heroku-postgresql
    - Select more RAM
        - to give more cache hit rate of as close to 100 percent as possible
    - http://www.craigkerstiens.com/2012/10/01/understanding-postgres-performance/

Promoting a Heroku database
- Steps 
    $ heroku config
        DATABASE_URL: postgres://user:password@ec2-54-221-206-165.compute-1.amazonaws.com:5432/d8hg98vjvtisu4
        HEROKU_POSTGRESQL_GRAY_URL: postgres://user:password@ec2-54-235-69-186.compute-1.amazonaws.com:5792/d75vuqlr37fe
        HEROKU_POSTGRESQL_ORANGE_URL: postgres://user:password@ec2-54-221-206-165.compute-1.amazonaws.com:5432/d8hg98vjvtisu4
    $ heroku pg:promote HEROKU_POSTGRESQL_GRAY 
        Promoting HEROKU_POSTGRESQL_GRAY_URL (DATABASE_URL) to DATABASE_URL... done
    $ heroku restart

Connecting to Heroku Postgres from Navicat
- Two versions
    - Navicat for Postgres
        - Dowload Installation - https://www.navicat.com/en/products/navicat-for-postgresql
    - Navicat Essentials - The essentials version is a less-expensive edition of Navicat with a limited feature set aimed at more basic database administration tasks.
        - Downaload Installation - https://www.navicat.com/en/products/navicat-essentials
- Set up a connection to our Heroku Postgres database
    - Steps
        - $ heroku config:get DATABASE_URL  
            postgres://username:password@ec2-55-221-206-165.compute-1.amazonaws.com:5432/dXhg98vjvtisu4
            - get the username and password
        - Connection GUI
            - Enter database Information (postgres://username:password@ec2-55-221-206-165.compute-1.amazonaws.com:5432/dXhg98vjvtisu4)
                - Connection Name: We will add our application name as Heroku Postgres
                - Host Name/IP Address: This will be ec2-55-221-206-165.compute-1.amazonaws.com
                - Port: The port number will be 5432
                - Default Database: This will be dXhg98vjvtisu4
                - User Name: The username has to be entered in this field
                - Password: The password has to be entered in this field
        - Next, we'll need to click on the SSL button and make sure Use SSL is checked. Once checked, we can test our connection by clicking on Test Connection:
- Alternative to -  http://www.jetbrains.com/datagrip/
- For MySQL databases, take a look at SequelPro - http://www.sequelpro.com/

Connecting to Heroku Postgres from psql
$ heroku pg:psql
    - This will connect to what the DATABASE_URL is set to
    - To exit the psql session, type \q and hit Enter or press Ctrl + D.
$ heroku pg:psql ORANGE
    - to connect to specific database 
$ PGPASSWORD=pass psql -U user -h host.com -p 5432 -d database-name 
    - This is using plain sql to connect to the database 
    - Remember, the DATABASE_URL variable is formatted as postgres:://username:password@host:port/database_name
$ touch ~/.pgpass && chmod 0600 ~/.pgpass 
    - hostname:port:database:username:password
    - Although this is rare, your Heroku Postgres credentials can change at any time. 
        If your database host fails and Heroku needs to move your database, the credentials you have saved will no longer be valid. 
        Heroku will always keep your DATABASE_URL variable up to date with the latest credentials.

Creating a database backup
$ heroku addons:add pgbackups:auto-month -install addons 
$ heroku pgbackups:capture
    HEROKU_POSTGRESQL_GRAY_URL (DATABASE_URL)  ----backup--->  b001
    Capturing... done
    Storing... done
$ heroku pgbackups
    ID    Backup Time
    ----  ------------------------- 
    b001  2014/08/24 14:56.26 +0000  
    b002  2014/08/24 15:03.59 +0000
$ heroku pgbackups:url b002
$ curl -o dbbackup.dump `heroku pgbackups:url b002`
    - this is Postgres's version of pgbackups, https://www.postgresql.org/docs/9.3/static/app-pgdump.html

Restoring from a backup
$ heroku pgbackups:restore
$ heroku pgbackups:restore HEROKU_POSTGRESQL_GRAY_URL b001 - to backup specific database
$ heroku pgbackups:restore HEROKU_POSTGRESQL_GRAY_URL 'https://s3.amazonaws.com/example-url/backup.dump' - restoring from a file 
    - https://www.postgresql.org/docs/9.3/static/app-pgrestore.html

Creating a read-only follower (Follower databases can be used to create redundancy, scaling, or upgrading your existing database)
- create a follower: https://postgres.heroku.com/databases
- $ heroku pg:wait
    Waiting for database HEROKU_POSTGRESQL_ORANGE_URL... \ preparing (37% completed)
- $ heroku pg:unfollow - onvert any follower into a primary database

Viewing and stopping database processes
$ heroku pg:ps
    pid |  state |      source    | running_for |
    ----+--------+----------------+--------------
    343 | active | /app/bin/rails | 00:04:23.0286
    - SELECT * FROM pg_stat_activity where datname = 'our-heroku-db-name'; -  to see the raw data Heroku is working with
$ heroku pg:kill 343

Analyzing Heroku Postgres's performance
$ heroku plugins:install git://github.com/heroku/heroku-pg-extras.git
$ heroku pg:diagnose
    GREEN: Connection Count
    GREEN: Long Queries
    GREEN: Idle in Transaction
    GREEN: Indexes
    GREEN: Bloat
    GREEN: Hit Rate
    GREEN: Blocking Queries
    GREEN: Load
$ heroku pg:cache-hit
        name      |         ratio
    ----------------+------------------------
    index hit rate | 0.99922477136372828798
    table hit rate | 0.99936977126404112551
    (2 rows)
$ heroku pg:index-usage
        relname      | percent_of_times_index_used | rows_in_table
    -------------------+-----------------------------+---------------
    categories_posts  |                             |         44063
    posts             | 99                          |         22012
    authors           | 0                           |         13137
    schema_migrations | Insufficient data           |             2
    categories        | 99                          |             2
    (5 rows)

$ heroku pg:unused-indexes
        table      |         index         | index_size | index_scans
    ----------------+-----------------------+------------+------------
    public.authors | index_authors_on_name | 784 kB     |           0
    (1 row)
$ heroku pg:long-running-queries
$ heroku pg:outliers
Learn more: https://www.postgresql.org/docs/9.3/static/monitoring-stats.html


