heroku login
heroku apps - to see list of apps
heroku config -a <appname> - to see all the configurations
heroku config:set <varname>=<varvalue> - to add new variable 
heroku run bash <appname> - to get the bash of your application
heroku run console -a <appname> - to get to the console 
heroku pg:ifno  <appname>  - to get the postgress database information
heroku logs -t  <appname> - to get the live log of the system
heroku run rake db:mugrate  <appname> - for rails application mugrate

Procfile - commands that are running in heroku
web: node index.js 

app.json - configurable environment variables https://devcenter.heroku.com/articles/app-json-schema
------------------------
heroku create <appname> 
git push heroku master 
heroku open  - to open heroku web 
heroku local web - runs a loval web server 

----------------------
heroku help command_name

heroku logs - to view our applications logs
heroku logs --tail - watch our logs in real time
heroku logs -n 100 - to see the 100 most recent lines, we can use -n
heroku logs -p web - logs to only show a specific process type. Here, we will only see logs from our web dynos:
heroku logs -p web.2 - logs from an individual dyno
heroku logs -p worker - logs worker process
heroku logs --source heroku - logs generated by Heroku or the API
heroku logs --source app - To view logs for only our application, we can set the source to app:
heroku logs --source api - logs from the API
heroku logs -p web --tail - combining logs 
heroku help logs - to get help on how to use logs 

Installing add-ons
heroku addons:list - list of all available Heroku add-ons
heroku addons - to see the currently installed add-ons
heroku addons:add <addonname> - install new addon
heroku addons:docs <addonname> - open addon documenatation
heroku addons:remove <addonname> - remove addon 
heroku addons:upgrade <addonname>:<addonnametier> - upgrading our  add-on to the starter tier
heroku addons:downgrade <addonname>
heroku help addons

Managing environment variables
heroku config - to see a list of all our existing environment variables
heroku config:get <variablename> - To view only the value of a specific variable
heroku config:set -a <varname>=<varvalue> - To set a new variable, we can use set
heroku config:set <varname>=<varvalue>  <varname>=<varvalue> - To set multiple variable
heroku config:unset <varname> - to delete variable 
heroku config:unset <varname> <varname> - to delete multiple variable 

Enabling the maintenance page
heroku maintenance off - to check if maintainance page is enabled
heroku maintenance:on - turn on maintenance page
heroku maintenance:off - turn off maintenance page

Managing releases and rolling back
heroku releases - view all of our releases
heroku releases:info <v1> - to see specific release info
heroku rollback - revert to the previous version of our application 
heroku rollback <v30> - to rollback to specific version
    - git checkout git-sha-here - to view our application's code in the exact state it 

Running one-off tasks and dynos
heroku run ls - to see listing of files in the dyno 
heroku run bash - start up a bash session
heroku run:detached echo "hello heroku" - un tasks in the background using the detached mode. The output of the command goes to our logs rather than the screen
heroku run --size=2X bash - djust the size of the one-off dynos
heroku ps - to see list of running dynos
heroku ps:stop <run.3849> - stopping running dynos

Managing SSH keys
heroku keys - view all of the existing keys in our Heroku account:
heroku keys:remove "7Qr3S/v coutermarsh.mike@gmail.com" - To remove an existing key,
heroku keys:add - look on our machine for a public key (~/.ssh/id_rsa.pub) and upload it
heroku keys:add /path/to/key.pub - if sssh public key not in the default location, try adding a path 

Sharing and collaboration
heroku sharing - To see the current users who have access to our application
heroku sharing:add coutermarshmike@gmail.com - to invite a collaborator, we can use sharing:add
heroku sharing:remove coutermarshmike@gmail.com -  to revoke access to our application

Monitoring load average and memory usage
heroku labs:enable log-runtime-metrics - install the log-runtime-metrics
heroku restart - restart dynos after installation
heroku logs - dynos' resource usage will be printed to our logs

Chapter 3. Setting Up a Staging Environment
Duplicating an existing application
heroku fork <new-applications-name> - need to be within local heroku folder, and fork the existing project 
heroku fork –a original-application-name new-applications-name - for specific application name, if you are not in the current directory 
heroku fork new-applications-name—region eu - to fork your current project into a different region 

Managing git remotes
git remote -v - verbose listing of our remotes
git push <production,staging,origin, remote name> master 
heroku git:remote—app staging-load-testing—remote staging - set up another git remote for our staging application
git push staging master - deploy code to our staging environment

Deploying with Heroku labs – Pipeline
heroku plugins:install git@github.com:heroku/heroku-pipeline.git - to install the Heroku Pipeline CLI plugin
heroku labs:enable pipelines - to enable pipelines for our Heroku application
heroku pipeline—app staging-application-name  - check the status of our staging pipeline 
heroku pipeline:add production-application-name—app staging-application-name - set our staging application's downstream to our production application
heroku pipeline:diff—app staging-application-name - compare the code between our staging (upstream) and production (downstream) applications
heroku pipeline:promote—app staging-application-name - to promote our staging slug to production
heroku releases—app production-application-name - verify by checking the releases for our production application

Deploying from tags
git tag -a v1.0 -m "Version 1 release. Example of a release tag" - to specify the tag as well as a message that describes it:
git push—tags origin - to push our new tag up to our origin repository(github)
git push -f heroku v1.0^{}:master - to push the tag to Heroku
git tag list - to see all the tags of our repositories

Continuous integration and deployment with Travis CI
gem install travis - to install travis 
touch .travis.yml - To deploy our application to Heroku, we need to provide Travis with a Heroku API key. We can do this by creating a Travis config file in the root directory of our application
travis setup heroku - to configure it for us to deploy to Heroku
cat .travis.yml - to view .travis.yml
    //elling it how to run our application's test suite. If our application uses rspec for testing, we will add the following line to our .travis.yml file:
    deploy:
    provider: heroku
    api_key:
        secure: J8ubqQEwN0eGrN1FdXonp+79fn0OWtvC0cft123
    app: refinery-staging
    on:
        repo: github-name/repository-name
    script: bundle exec rspec
$ git add .travis.yml
$ git commit -m 'Adding Travis configuration
 file'
$ git push origin master

Chapter 4. Production-ready with Heroku
Managing domains from the command line
heroku domains - to see  list our application's existing domains
heroku domains:add example-domain.com - to add a custom domain to our application
heroku domains:add testing.example-domain.com - add subdomains using the same command
