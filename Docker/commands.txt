Docker Flow
- you need to download an image from docker hub - $ docker run -ti  <reponame>:<tag> //ti mean terminal interactive
- use the image to run a container - $ docker images - to see all your images and you can run multiple container with one image each container is self contained 
- $ docker ps -a  - to see running containers
    $ docker ps --format $FORMAT -a - format is use to view vertically vs horizontally
    $ docker ps --format $FORMAT -l - to see the last running container 
    $ docker container list -f "status=exited" - to see stopped containers
    $ docker container ls -f "status=exited" - to see stopped containers
    $ docker ps -f "status=exited" - to see stopped containers
- $ docker commit <container_id> - to create a new image from a running container 
    - this creates random image  id
    - $docker tag <imageid> <imagename/reponame>:<tag> - tag is optional if you dont tag, it will create a tag called latest 
    - $ docker commit <container_id> <reponame>:<tag>  - preferred way
$ docker run --rm -ti <reponame>:<tag> sleep  5 - run a container and sleep for 5 seconds and remove the container when done 
$ docker run -ti <reponame>:<tag> bash -c "sleep 3; echo all done" - bash -c runs the bash command
$ docker run -d -ti <reponame>:<tag> - runs the docker in the background
    $ docker run ps --format $FORMAT -a 
    $ docker attach <containter_name or id> - logs you in to a detached container 
    $ press ctrl + p, ctrl + q - leaves you from running container but it makes it keep running 
$ docker exec -ti <containerid> bash - best for debugging and database administration
- Managing containers
    - $ docker logs <containerid> - to see containers logs
    - $ docker run --name <nameyourcontainer> <reponame>:<tag> -d bash -c "lose /etc/password" - theres a typo lose 
    - $ docker logs <nameofyourcontainer> - dont leet the log det too large
    - $ docker kill <nameofyourcontainer> - stop container
    - $ docker rm <nameofyourcontainer> 
    - $ docker run --memory maximum-allowed-memory <reponame>:<tag> <command> - to controlled ram 
    - $ docker run --cpu-shares <reponame>:<tag> <command> - to controll cpu usage 
    - $ docker run --cpu-quota <reponame>:<tag> <command> - to controll cpu usaage with hard limit
    - Don't let your containers fetch dependencies when they start 
    - don't leae important thins in unnamed stopped containers
Container Networking
- export ports to let connections in
- private networks to connect between containers 
 - $ docker run -ti --name <containername>  -p <externalporta:dockerporta> -p <externalportb:dockerportb> <reponame>:<tag> bash - you can open multiple port
    - # nc -lp <dockerporta> | nc -lp <dockerportb> - inside docker
    - $ nc localhost <externalporta> -  your local host computer terminal instance
    - $ nc localhost <externalportb> - your local host computer another terminal instance 
   - $ nc localhost <externalporta> -  your local host computer terminal instance now send a message: it should go from externalporta:dockerporta out to dockerportb:externalportb
   - if you don't have netcat installed try this
    - docker run --rm -ti ubuntu:14.04 bash - it has nc installed first container
        - # nc host.docker.internal <dockerporta>
    - docker run --rm -ti ubuntu:14.04 bash - it has nc installed second container
        - # nc host.docker.internal <dockerportb>
        - # nc host.docker.internal <dockerporta> - try sending a message here you sould see it second container 
- $ docker port <containeridorname> - to see running port external auto generated port
    - docker run -ti --name <containername>  -p <dockerporta> -p <dockerportb> <reponame>:<tag> bash
        - # nc -lp <dockerporta> | nc -lp <dockerportb> - inside docker
    - $ docker port <containeridorname> 
    - open 2 terminal instance for 
        - nc localhost <externalporta>
        - nc localhost <externalportb>
        $ nc localhost <externalporta> -  your local host computer terminal instance now send a message: it should go from externalporta:dockerporta out to dockerportb:externalportb
- UDP port
     - docker run -ti --name <containername>  -p <dockerporta/udp> -p <dockerportb> <reponame>:<tag> bash
        - #nc -ulp 45678 
    - $ docker port <containername> 
    - open 1 terminal instance for 
        -$ nc localhost <externalportautogeneratedport> 
        - send a message 
        - your docker should receive it
- Docker network ls 
    - default
        - bridge - when docker is just place on a bridge network
        - host - when docker is just not isolated - not good for security
        - none - no networking

- $ docker network create <nameofyournetwork>
    - $docker run -it --net <nameofyournetwork> --name <containername> <reponame>:<tag> bash - add a running container into the network
        - #ping <containername>
        - a#nc -lp 1234 - to open port of your container
        - add a new container and send a message from that container to the open port
            - b#nc <containernamea> 1234 
                - send a message
                - your a#nc should received it
- Legacy Linking 
    - but only one way
    - a lot hard to orchestrate
    - Test it
        - $ docker run -it -e SECRET=theinternetlovescats --net <nameofyournetworka> --name <containernamea> <reponame>:<tag> bash
        - $ docker run -it --link <nameofyournetworka> --name <containernameab> <reponame>:<tag> bash
        - a# nc -lp 1234
        - b# catserver 1234 
            - send message to a from here
            - a should received the message
            - if you try to flip the -lp to b, it won't work message in a link network is one way
        - a# env 
            - you should see the SECRET variable
            #b you should see all A server varibles, but the A cannot see all the B variables
Image management 
    - $ docker images
    - $ docker ps -l --format=$FORMAT
    - $ docker commit <containernidorname> <newimagename>:<versionnumber>
    - registry.example.com:port/organization/image-name:version-tag - organization/image-name:version-tag is enough to naming
        - $ docker push and docker push
    - $ docker rmi <imageid>
    - Push Image to Docker Hub
        - create a docker hub account
        - docker_hub_id/repository_name
        - $ docker pull <repositoryname>:<tag>
        - $ docker images
        - $ docker tag <image_ID> <docker_hub_id/repositoryname>:<tag>
        - $ docker login --username=jmariano
        ~ $ docker push <docker_hub_id/repositoryname>:<tag>
Volumes 
    - Persistent 
    - Ephemeral (temporary)
    sharing between local computer and docker container
        - Create a local folder <nameoflocaldesktopfolder>
        - $ docker run -ti -v  <localcomputerpath>/<nameoflocaldesktopfolder>:/<containerpath>/<containersharefolder> <reponame>:<tag> bash 
    sharing between docker containers (Ephemeral - data persist and be passed around as long as there is a running containers)
        - $ docker run -ti -v /<containerpatha>/<containersharefolder> --name <containernamea> <reponame>:<tag> bash 
        - $ docker run -ti --volumes-from <containernamea> --name <containernameb> <reponame>:<tag> bash 
    
Dockerfile
    - $ docker build -t <thenameofthetobecreatedcontainer> <path/dockerfile> 
    - $ docker build -ti <thenameofthetobecreatedcontainer> <path/dockerfile> 
    - write the most changebale part of your dockerfile in the end 
    - writing dockerfile documentation - https://docs.docker.com/engine/reference/builder/




 Example:
 $ docker run -it ubuntu:latest bash //bash so you can use the bash command of the running container




Docker Images
$ docker history <REPOSITORY>

Building a Docker Image
- commit changes made in a docker container: https://hub.docker.com/_/debian/
    - spin up a container from a base image : $ docker run -it <reponame>:<tag> 
    - Install git package in the container: #  apt-get update && apt-get install -y git
    - Commit changes made in the container: $ docker commit <container_id> <reponame>:<tag> 
    - Check for the new image: $ docker images 
    - Run the image: $ docker run -it <reponame>:<tag> 
- Dockerfile
    - write a docker file
        $ touch Dockerfile
        $ vi Dockerfile
                FROM <reponame>:<tag> 
                RUN apt-get update
                RUN apt-get install -y git
                RUN apt-get install -y vim
                RUN apt-get install install nano
        :wq!
    - Run a Dockerfile
    path_of_dockerfile$ docker build -t <reponame> . --no-cache=true


    - CHAIN RUN Instructions - to reduce number of image layers it creates
        $ touch Dockerfile
        $ vi Dockerfile
                FROM <reponame>:<tag> 
                RUN apt-get update && apt-get install -y \
                    git \
                    vim
        :wq!
        $ docker build -t <reponame> . 
    - CMD Instructions - if CMS instruction is not explicity specified in dockerfile, it will use the default bash 
        $ touch Dockerfile
        $ vi Dockerfile
                FROM <reponame>:<tag> 
                RUN apt-get update && apt-get install -y \
                    git \
                    phyton \
                    vim
                CMD ["echo", "hello world"]
        :wq!
        $ docker build -t <reponame> .  
        $ docker run <container_ID> echo "hello docker" //overwrites your dockerfile echo command
    - Docker cache
        - Each time docker executes an instruction it builds a new image layer
        - The next time, if the instruction doesn't change, docker will simply reuse the existing layer
            - Rewrite dockerfile to avoid agressive Caching
                - $ vi Dockerfile
                    FROM <reponame>:<tag> 
                    RUN apt-get update && apt-get install -y \
                        phyton \
                        git \
                        vim
                    CMD ["echo", "hello world"]
            :wq!
            - --no-ache to avoid agressive Caching
                - $ docker build -t <reponame> . --no-cache=true
    - Copy Instructions
        - the copy instruction copies new files or directories from build context and adds them to the file system of the container
        - $ touch abc.txt
        - $ touch Dockerfile
        - $ vi Dockerfile
                    FROM <reponame>:<tag> 
                    RUN apt-get update && apt-get install -y \
                        phyton \
                        git \
                        vim
                    COPY abc.txt /src/abc.txt    //  COPY /src_yourcomputer/abc.txt /to_src_docker_filesystem/abc.txt   
            :wq!
        - $ docker build -t <reponame> .
    - ADD Instructions
        - The Add instruction copies file and allow you to download a file from internet and copy to the container
        - Add also has the ability to autonatically unpack compresed files
        - The rule is: use COPY for the sake for transparency, unless you're absolutely sure you need to ADD


$ docker run -d --name <dbname> <repositoryname>:<tag> - your database
$ docker run -d -p externalport:dockerport --link <dbname> <repositoryservername>:<tag>
$ docker exec -it <containerid> bash 
    $ more /etc/hosts
$docker inspect <containerid> | grep IP

/* Docker Networking */
- when container is running it uses bridge(docker 0) to host to internet
- Network Types
    - Closed Network / None Network
    - Bridge Network
    - Host Network
    - Overlay Network
- $ docker network ls
    - none network - no access to outside world
        - $ docker run -d --net none busybox sleep 100
        - $ docker exec -it <containerId> /bin/ash
        - # ping 8.8.8.8 //cannot connect to google
        - # ifconfig
            - contains only the loopback address 127.0.0.1

    - bridge network 
        - $ docker network inspect bridge
            - contains ip in range: 172.17.0.0 - 172.17.255.255
            - $ docker run -d --name <customconatinername1> busybox sleep 1000
            - $ docker exec -it <customconatinername1>  ifconfig
                - it should contain a loopback address and a private address
                - private address - can be use to connect other containers in the same bridge network
                    - $ docker run -d --name <customconatinername2> busybox sleep 1000
                        - $docker exec -it  <customconatinername2> ifconfig
                    - $ docker exec -it <customconatinername1> ping <customconatinername2_ipaddress> //should be able to connect to internet <customconatinername2>
                    - $ docker exec -it <customconatinername1> ping 8.8.8.8 //should be able to connect to internet

        - $ docker network create --driver bridge <custom_bridge_netowrk_name>
            - $ docker network ls
            - $ docker network inspect <custom_bridge_netowrk_name>
                -  "Subnet": "172.18.0.0/16" or contains ip in range: 172.18.0.0 - 172.18.255.255
            - $ docker run -d --name <customconatinername3> --net <custom_bridge_netowrk_name> busybox sleep 1000
                - $ docker exec -it <customconatinername3>  ifconfig
                - $ docker inpect <customconatinername1> 
                - $ docker exec -it <customconatinername3>  ping <customconatinername1_ipaddress>  //should not be able to connect
                - $ docker network connect bridge <customconatinername3>  //this will add a new network to  <customconatinername3> 
                        - $ docker exec -it <customconatinername3>  ifconfig 
                    - $ docker exec -it  <customconatinername3> ping <customconatinername1_ipaddress>
                    - $ docker network disconnect bridge <customconatinername3>   //this will remove  network to  <customconatinername3> 
                        - $ docker exec -it <customconatinername3>  ifconfig
    - Host Network - containers network connected to host network
        -$ docker run -d --name <customconatinername4>  --net host busybox sleep 1000
            - $ docker exec -it <customconatinername3>  ifconfig
        - higher performance than bridge(docker 0)
    - Overlay Network
        - multihost network
        - Preriquisite: 
            - Docker need to run in swarm mode 
            - A ke value store such as consul

Define Container Networks with Docker Compose
- $ touch docker-compose.yml
- $ vi docker-compose.yml
   ******* Example 1 *******
    version: '2'
    services:
        dockerapp:
            build: .
            ports:
                - "5000:5000"
            volumes:
                - ./app:/app
            networks:
                - my_net
        redis:
            image: redis.3.2.0
            networks:
                - my_net
        networks:
        my_net:
            driver: bridge
    ******* End Example 1*******
    ******* Example 2 *******
    version: '2'
    services:
        proxy:
            build: ./proxy
            networks:
            - front
        app:
            build: ./app
            networks:
                - front
                - back 
        db:
            image: postgres
            networks: 
                - back
    networks:
        front: 
            driver: custom-driver-1
        back: 
            driver: custom-driver-2
            driver_opts:
                foo: "1"
                bar: "2"
    ******* End Example 2 *******
- $ docker-compose up -d 
    - $ docker network ls 
        - This creates <current_dir_name>_default
        - $ docker-compose down //stops all container running in the <current_dir_name>_default and removes <current_dir_name>_default from network ls

Unit testing
- Python unit testing sample
- test.py 
    import unittest
    import app

    class TestDockerapp(unittest.TestCase):

        def setUp(self):
            self.app = app.app.test_client()

        def test_save_value(self):
            response = self.app.post('/', data=dict(submit='save', key='2', cache_value='two'))
            assert response.status_code == 200
            assert b'2' in response.data
            assert b'two' in response.data

        def test_load_value(self):
            self.app.post('/', data=dict(submit='save', key='2', cache_value='two'))
            response = self.app.post('/', data=dict(submit='load', key='2'))
            assert response.status_code == 200
            assert b'2' in response.data
            assert b'two' in response.data

    if __name__=='__main__':
        unittest.main()
- $ docker-compose run <servicename> phyton test.py //servicename is from services in docker-compse.yml




Continous Integration - rapid feedback testing
- Github and Circle CI (https://circleci.com)
- Fork the dockerapp repository from Github //https://github.com/jleetutorial/dockerapp
- Set up ssh keys for github account
    Checking for existing SSH keys:
    https://help.github.com/articles/checking-for-existing-ssh-keys/
    Generating a new SSH key and adding it to the ssh-agent:
    https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
    Adding a new SSH key to your GitHub account:
    https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/

- Link Circle CI with github
    - $ git clone <github repo> //download repository
    - circle.yml
        machine:
            pre:
                - curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0 //virtual machine in circle ci
            services:
                - docker

            dependencies:
            pre:
                - sudo pip install docker-compose //depencies to install

            test:                      // how to run the test
            override:
                - docker-compose up -d
                - docker-compose run dockerapp python test.py

            deployment:
            hub:
                branch: /.*/
                commands:
                - docker login -e $DOCKER_HUB_EMAIL -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
                - docker tag dockerapp_dockerapp $DOCKER_HUB_USER_ID/dockerapp:$CIRCLE_SHA1
                - docker tag dockerapp_dockerapp $DOCKER_HUB_USER_ID/dockerapp:latest
                - docker push $DOCKER_HUB_USER_ID/dockerapp:$CIRCLE_SHA1
                - docker push $DOCKER_HUB_USER_ID/dockerapp:latest
    - Connect Circle ci with github
        - Click at project 
        - Choose your os and click build project // this runs circle.yml inside circle ci


    
 -----------------------------
Docker Compose
1. Install Docker Compose
https://docs.docker.com/compose/install/
curl -L "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$ chmod +x /usr/local/bin/docker-compose

2. docker-compose.yml
version: '2'
services:
  web:
    build: .
    ports:
     - "5000:5000"
    volumes:
     - .:/code
  redis:
    image: "redis:alpine"








 -----------------       

1. Create a Custom Bridge Network 
    - $ docker network create --driver bridge customname_of_netowork
2. Run Containers in the Network 
    - $ docker run -d --net=customname_of_netowork --name containername mongo 


$ docker-machine ls
$ docker-machine start <machine name>
$ docker-machine stop <machine name>
$ docker-machine env <machine name> //if terminal doesn't connect to your docker default
$ docker-machine ip <machine name>

$ docker pull <imagename>
$ docker run <imagename>
$ docker images
$ docker ps
$ docker rm <tagname> || <CONTAINER ID>
$ docker rmi -f <repositoryname>




$ docker pull microsoft/mssql-server-linux
$ docker run -d -p 1433:1433 \
> -e SA_PASSWORD='password111!' \
> -e ACCEPT_EULA=Y \
> microsoft/mssql-server-linux

$ docker stop container_id

$ docker info
$ Docker version
$ docker-machine ls //list all the docker machine running
$ docker-machine status default //default is the machine
$ docker-machine env default //default is the machine
$ docker images
$ docker run repositoryname:tag echo "Download and Installed Completed"
$ docker run repositoryname:tag ls /
//i - interactive container t - pseudo TTY that attaches stdin and stadout (This will give you a command line access to server)
$ docker run -i -t repositoryname:tag    - this will give you the command line of your running container (which is running in the foreground)
$ docker run -d  repositoryname:tag   sleep 1000 //outputs docker container id, -d runs in detachmode
$ docker ps //display the running containers 
$ docker run --rm repositoryname:tag  sleep 1 //run and remove after 1 seconds
$ docker run --name hellow_world repositoryname:tag
$ docker ps - a //to get all the container - you can get the container_id from here
$ docker run -d  repositoryname:tag   sleep 100
$ docker inspect containerid // details the ip and macaddress of the container and logpagth and other useful information
$ docker run -it -d -p host_port:container_port repositoryname:tag 
$ docker logs containerid
$ docker history repositoryname:tag  - to see the image layers of the container


$ docker run --name yourcontainer_name -it repositoryname:tag
    # apt-get update && apt-get install -y git

//Two ways to spun up a copy of a docker image
    $ docker commit container_ID repositoryname:tag //creates a new image of your container then it creates a new image
        $docker images //to see new images
        $ docker run -it repositoryname:tag


    $ touch Dockerfile
        FROM repositoryname:tag
        RUN apt-get update
        RUN apt-get install -y git
        RUN apt-get install -y vim
        :wq!
    $ docker build -t customrespositoryname/customtag .pathofyourdockerfile


//Docker File InDepth
 $ touch Dockerfile
        FROM repositoryname:tag
        RUN apt-get update && apt-get install -y \
            git \
            phyton \
            vim
        CMD ["echo", "hello world"]
        :wq!
$ docker build -t customrespositoryname:customtag .pathofyourdockerfile
$ docker run imageID //you should see hello world
$ docker run imageID echo "hello docker" // prints hello docker

//Aggressive Caching
1. To remove Aggressive Caching - re-write the instructions from 1 line to multiple line or other way around
2. $ docker build -t customrespositoryname/customtag . --no-cache=true

//Copy instructions 
$ touch filename.txt
$ vi Dockerfile 
     FROM repositoryname:tag
        RUN apt-get update && apt-get install -y \
            git \
            phyton \
            vim
        COPY filename.txt /src/filename.txt
        :wq!

//Push your Images to Docker Hub
go to hub.docker.com 

$ docker images
$ docker tag IMAGE_ID docker_hub_id/repository_name:yourtag
$ docker login --username=yourusername
$ docker push docker_hub_id/repository_name:yourtag


$docker exec -it container_id bash



Find Docker Quickstart Terminal

Docker default machine with IP 192.168.99.100

/* Docker Networking */
1. Create a Custom Bridge Network 
    - $ docker network create --driver bridge customname_of_netowork
2. Run Containers in the Network 
    - $ docker run -d --net=customname_of_netowork --name containername mongo 

$ brctl show <interfacename>
$ docker run -it --name=net1 net-img
$ docker run -it --name=net2 net-img
$ brctl show
$ docker attach net1
$ ping 8.8.8.8
$ traceroute 8.8.8.8
$ docker inspect net2
$ ls -l /var/lub/docker/ccontainers/<containerid> //to see the container network details in files
    - you can see the container host and resolv.conf

$ docker run --dns=8.8.4.4 --name=dnstest net-img
$ docker inspect dnstest 
//Exposing ports to outside world
vim Dockerfile
EXPOSE 80 
$ docker build -t="apache-img" .
$ docker run -d -p 5001:80 --name=web1 apache-img
$ docker ps
$ docker port web1
$ docker run -d -p 5002:80/udp --name=web2 apache-img
$ docker port web2
$ docker run -d -p 192.168.56.50:5003:80 --name=web3 apache-img
$ vim Dockerfile
$ docker build -t="apache-img2" .
$ docker run -d -P --name=containername apache-img

//Linking Container
SRC : 80
RCVR : networking receives the network config of SRC

$ docker run --name=sourcecontainername -d imagename
$ docker run --name=receivingcontainer --link=sourcecontainername:sourcecontainernamealias -it <imagename> /bin/bash
$ docker inspect receivingcontainer
    - you should see link
$ docker inspect sourcecontainername | grep Links
    - you should see not link    
$ docker attach receivingcontainer
    # env | grep sourcecontainernamealias
    # cat /etc/hosts

docker run -d -p 1433:1433 -e SA_PASSWORD='password111!' -e ACCEPT_EULA=Y --link=apacheserver2:apacheserver microsoft/mssql-server-linux

Docker Compose 
1. docker-compose.yml
2. docker compose build
3. docker images (services)


version: '2'
services:
  web: //cusom name of service
    build:
        context: ./dir  
        dockerfile: web.dockerfile
        args:
            buildno: 1
    networks:
     -some-network 
    
    mongodb:
        image: mongo
        networks:
            -some-network 
    networks:
        some-network 
        driver: bridge

$ docker-compose build
$ docker-compose up
$ docker-compose down
$ docker-compose logs
$ docker-compose ps
$ docker-compose stop
$ docker-compose start
$ docker-compose rm 



/* Major Docker Components */
Docker Engine/Daemon/runtime - Shipping Yard
Docker Images - Manifest
Docker Container - Shipping Containers

$ docker pull -a <imagename>
$ docker pulll <imagename>     // Load to: /var/lib/docker<storage driver>
$ docker run -it <imagename> <application to run>  //  $ docker run -it ubuntu /bin/bash
$ docker images // To see all images
$ docker images <imagename>
$ docker ps // to see what's running container
$ docker attach <containerid>
$ docker ps -a //To see all container


Registery And repository 
hub.docker.com 

Layers / stack Images - contains a unique ID, higher layer win (union mounts)
bootfs - starting containers
Base Image - Operating System 
Layer 1 - Software To Install in OS 
Layer 2 - Updates
R/W 

$ docker images --tree
$ ls -l /var/lib/docker<storage driver>/layersid //this will display layers inside the layer
$ cat /var/lib/docker<storage driver>/layers/layerid //this will display layers inside the  layer

$ docker imges
$ docker run ubuntu /bin/bash -c "echo 'hello world' > /<folderloc>/<filename>"
$ docker ps -a
$ docker commit  <containerid> <customreponame> //creates an image from the changes that you've made previously
$ docker history <customreponame>
$ docker save -o /<folderdirectorylocation>/<customreponame>.tar <customreponame>
$ ls -lh /<folderdirectorylocation>/<customreponame>.tar
$ tar -tf /<folderdirectorylocation>/<customreponame>.tar
$ docker load i /<folderdirectorylocation>/<customreponame>.tar
$ docker run -it fridge /bin/bash
# cat /<folderloc>/<filename>
# docker run -d ubuntu /bin/bash -c "ping 8.8.8.8 -c 30"
# docker ps
# docker stop <containerid>
$ docker run <reponame>:<tag>
$ docker run --cpu-shares=256
$ docker run memory=1g
$ docker run --cpu memory=1g
$ docker inspect <containerID> 
$ docker inspect <imagesid> 
$ docker attach <containerid>


Starting and Stoping Container
$ docker run -it <reponame>:<tag> /bin/bash
$ docker stop  <containerID> 
$ docker ps -l 
$ docker start <containerID> 
$ docker attach <containerID> 
$ docker restart <containerID> 

PID 1 and Containers
init is a bit special

Deleting Containers
$ docker ps 
$ docker info
$ ls -l /var/lib/docker/containers | wc -l
# docker stop <containerid>
$ docker rm <containerid>
$ docker rmi <containerid>
$ docker rm -f  <containerid> //to force deletion

Command Shorcuts
$ alias dps="docker ps"
$ dps

Looking inside Containers
$ docker top <containerid>
$ docker attach <containerid>
# ps -ef
$ docker logs <containerid>
$ docker inspect <containerid> //pulled from config.json
    $ ls -1 /var/lib.docker/containers/<containerid>/config.json


Running a shell
$ docker attach // attaches to PID inside the container
$ docker inpect <containerid> | grep Pid 
$ nsenter -m -u -n -p -i -t <Pid> /bin/bash //nsenter allows you to enter namespaces
$ docker-enter <containerid>'
$ exit
$ docker exec -it <containerid> /bin/bash //recomemded way

$ docker run -v /usr/local/bin:/target <containerid>:<tag>


Dockerfile - a text file with syntax, instructions to build image
$ vim Dockerfile
    # comment

    FROM <Imagename>:<version>
    MAINTAINER jpm8387@yahoo.com
    RUN apt-get update 
    RUN apt-get install -y nginx
    RUN apt-get install -y golang
    CMD ["echo", "Hellow World"]
:wq!



Docker Build Image
$ docker build -t <imagename>:<tag> . 
$ docker history <imageid>
$ docker run <imagename>:<tag> 

$ docker build -t="build1" .
    - After this runs it saves a cache
$ docker info
    $ vim Dockerfile  // to open the Dockerfile and then edit to remove the cache
$ docker build -t="build2" .
$ docker history <imageid>
//Web Server Dockerfile
    FROM ubuntu:15.04
    RUN apt-get update && apt-get install -y \
        apache2  \
        apache2-utils \
        vim \
        &&  apt-get clean \
        && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
    Expose 80 
    VOLUME /<Folderloc>
    CMD ["apache2ctl", "-d", "FOREGROUND"]
    :wq!
$ docker build -t="WEBSERVER" .
$ docker run -d -p 80:80 WEBSERVER
$ docker stop <containerID> 
$ docker history WEBSERVER // \ makes the command run in one layer

RUN - runs on build time, add layers to images, used to install apps
CMD - runs inside the container, run time, quivalent to /bin/bash
    Shell Form - Commands are expressed the same way as shell Commands, commands get prepended "/bin/bash -c"
    Exec Form  - JSON array style - ["command", "arg1"]

ENTRYPOINT ["ECHO"] 
    $ docker run <imagename> hello world there!
ENTRYPOINT ["apache2ctl"] 
    $ docker run -d -p 80:80 web2 -D FOREGROUND

Volume 
$ docker run -it -v /<folderloc> --name=<customecontainername> <repository>:<tag> /bin/bash
    $ docker run -it -p 8080:3000 -v $(pwd<hostfolderloc>):/<containerfolderloc> --name=<customecontainername> <repository>:<tag> /bin/bash
$ docker inspect <customecontainername> 
$ docker rm -v <containerid>





Read other programers dockerfile 



Create A Public Repo on Docker Hub
$ docker tag <imageid> <yourdockerhubid>/<reponame>:<tag>
$ docker push <yourdockerhubid>/<reponame>:<tag>
$ docker pull <yourdockerhubid>/<reponame>:<tag>

Private Registries
$ docker version
$ docker run -d -p 5000:5000 registry // creates a registry server
url: debian8.docker.course:5000
$ docker tag <imageid>  debian8.docker.course:5000/priv-test //create an image inside ubuntu
$ docker push debian8.docker.course:500/priv-test //pushing  <ubuntu image>  is pushed to private repo
$ docker run pull debian8.docker.course:500/priv-test // pulling your image to other other os 





//Docker Networking
$ sudo lsof -i -P | grep -i "listen"
$ docker ps



https://hub.docker.com/r/thomasbisignani/docker-apache-php-oracle/
$ docker pull thomasbisignani/docker-apache-php-oracle
$ docker run -p 8080:80 -d -v $(pwd)/sample:/var/www/html thomasbisignani/docker-apache-php-oracle
$ docker run -p 8080:80 -d -v </local/path/www>:/var/www/html thomasbisignani/docker-apache-php-oracle
$ docker exec -it <containerid> /bin/bash

https://hub.docker.com/r/sath89/oracle-12c/
$docker pull sath89/oracle-12c
$docker run -d -p 8080:8080 -p 1521:1521 -v /my/oracle/data:/u01/app/oracle -e DBCA_TOTAL_MEMORY=1024 sath89/oracle-12c
$ docker ps -a
$ docker stop <ContainerID>
$ docker start <ContainerID>





$ docker run --name=sourcecontainername -d -p 8080:8080 -p 1521:1521 -v $(pwd)/oracle:/u01/app/oracle -e DBCA_TOTAL_MEMORY=1024 sath89/oracle-12c
$ docker run --link=sourcecontainername:sourcecontainername  -p 80:80 -d -v $(pwd)/sample:/var/www/html thomasbisignani/docker-apache-php-oracle
$ docker inspect receivingcontainer
    - you should see link
    - docker inspect -f "{{ .HostConfig.Links }}" <receivingcontainername> 
    - docker network inspect bridge

    docker inspect -f "{{ .HostConfig.Links }}"  dreamy_mccarthy
$ docker exec -it <containerid> /bin/bash
$ docker inspect sourcecontainername | grep Links
    - you should see not link    
$ docker attach receivingcontainer
    # env | grep sourcecontainernamealias
    # cat /etc/hosts

$ docker ps -a
$ docker exec -it <containerid> /bin/bash
$ sqlplus 
Enter Username: sys as sysdba
Password: oracle

https://aishwaryavaishno.wordpress.com/2013/05/10/how-to-reset-password-for-a-locked-oracle-sql-developer-account/
select username,password,account_status from dba_users; //check which account is locked
alter user USERNAME identified by password; // change user password
alter user scott account unlock; //unlock user

 
$ docker run --name=sourcecontainername11g -d -p 8080:8080 -p 1521:1521 -v $(pwd)/oracle11g:/u01/app/oracle -e DBCA_TOTAL_MEMORY=1024 sath89/oracle-xe-11g
https://hub.docker.com/r/sath89/oracle-xe-11g/
$ cd docker-php7-oci8-apache-master
$ docker-compose up -d



https://hub.docker.com/r/sath89/oracle-xe-11g/
---------------------------------------------
PHP 7 with mysql
$ git clone https://github.com/hamptonpaulk/php7-dockerized.git 
$ cd php7-dockerized 
$ docker-compose build 
$ docker-compose up -d 
$ docker exec php /bin/bash 
# php -v # exit 
$ docker exec -it 2 <container_id> bash 
# mysql -u root -p 
# password 
mysql > show databases; 
mysql > exit 
# exit 
$

- you can use workbench to connect
----------------------------

$ docker version