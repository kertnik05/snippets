
Programming Jargon:
Parent Class - also called super class or base class
Child Class - also called sub class
method - is a function that contains structured code (sequence, conditions, iterations)
Interface - is a public method. Normally has a return. Accessor and Constructor are both interface. 
    Abstract Interface - more generic (Take me to Airport). More Resuable. 
    Concrete Interface - very specific (Take taxi, turn right, turn left ...)
        Design Thought Process - designed the interface by having users perspective; give only what they need; When first creating a class, hide everything; check requirements to identify the behavior of the interface. 
        Users - Objects that uses and sends data to interface; Users need to know how to use the interface (like what parameters to pass).
    When possible, avoid changes to interface after its built.
    Stubs - a temporary implementation of interface (ie.. simulate database connection)

Implementation - is a private method. It can be change without the knowledge of the user of the interface. 
Constructor - is a method that is the same as classname or use the word contruct method. Primary purpose is for initialization(safe state) of attributes. No return. Called during intantiation. 
    Best practice to have one constructor even if not in used. If you plan to add a contructor, then replace the default (check for bugs) or just simply add another contructor. 


Is a Relationship - Circle is a shape, Square is a shape
    Inheritance - Abstaction (copy a parent to create it's own)
        Multiple Inheritance - Class that inherets from multiple class (except Java, .net, and Objective C)
    Polymorphism - Normally when a public abstract method  of a parent class is overriden.
        When an Abstract class is extended, it is inheretance. And when the methods is overriden that's when you can call poly morphism. 
Has a Relationship 
    composition - a class/object which is composed of other class/object. Embed a class inside another class

Overloading a Method - a method that is called twice within an object/class with different parameter each time. Good if you don't know what possible parameter input the user of the interface/method. 
    For example, the user is login/out they can still order from shopping cart. In each case, if this is a constructor, it can be initialize differently. 

Signature - is a method name + Parameter

Error Handling - Throw an exception, do not ignore. Display and error and do a cleanup by asking user for error feedback. Try and cath method.
Destructors = available on some language like C#. Purpose to prevent memory leak and code cleanup.


How to Think in OOP:
 - Think in Abstract
 - Minimal Interace as possible

When Designing a Class: Keep Extensibility in mind. Provide a way to copy and compare objects. 
    Keep the scope as small as possible. Think carefully if class/object attributes needs to belong to local attribute. 
    Class should be responsible for itself meaning print method of a circle shape is different than printing a square shape. 
    A change in one classs should not interfere other classes. Write and test code at small increment. Use stubs for testing.
    When altering Interface or Implementation of the class, take the old class and wrap it inside the new class.
Non portable code (ie native or concrete interface) - provide a wrapper. 

Objects 
    - Serializing - reconstruct the object after being send to the wire
    - Deserializing - deconstructing an object (Must use the same specification as serializing - normally non-propriteary). 
    - Marshalling - sending object to the wire 

