from your project folder: Install Composer. https://getcomposer.org/download/
- To create new project: php composer.phar create-project symfony/skeleton <project_name>
- run http server - php -S 127.0.0.1:8000 -t public
    - To get a better server: run - php composer.phar require server  
        - normally <vendor_name>/<package_name>, but in this case server, is ok because of flex
        - run: ./bin/console server:run 
        - ./bin/console - debugging console.
- run git status 
    - git is installed by symfony 

Improve your phpstorm ide 
- install/enable symfony
- install/enable php annotations
- install/enable php toolbox
- point your ide to the location of composer.json

First Route & Controller 
-routing using  config/routes.yaml
    index:
        path: /
        controller: App\Controller\ArticleController::homepage
-controller src/Controller/ArticleController.php
    namespace App\Controller;

    use Symfony\Component\HttpFoundation\Response;

    class ArticleController
    {
        public function homepage()
        {
            return new Response('OMG! My first page already! WOOO!');
        }
    }

- Routing using annotation 
    - Install: php composer.phar require annotations
    - comment out config/routes.yaml
    - your route now can be place on top of the controller

    use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;

    class ArticleController
    {

        /**
        * @Route("/")
        */
        public function homepage()
        {
            ... line 15
        }

        /**
        * @Route("/news/{slug}")
        */
        public function show($slug)
        {
            return new Response(sprintf(
                'Future page to show the article: "%s"',
                $slug
            ));
        }
    }

Install Recipe: composer require sensiolabs/security-checker
- git status
    - Woh! We expected composer.json and composer.lock to be updated. But there are also changes to a symfony.lock file and we suddenly have a brand new config file!
    First, symfony.lock: this file is managed by Flex. It keeps track of which recipes have been installed. Basically... commit it to git, but don't worry about it.
    - The second file is config/packages/dev/security_checker.yaml: - It adds a new bin/console command to our app! 
    - services: config/packages/dev/security_checker.yaml
    SensioLabs\Security\SecurityChecker:
        public: false
    SensioLabs\Security\Command\SecurityCheckerCommand:
        arguments: ['@SensioLabs\Security\SecurityChecker']
        tags:
            - { name: console.command }
- php bin/console security:checker 
- to see where this repo is located in the cloud - https://symfony.sh/ search for the package and click recipe 
    - https://github.com/symfony/recipes/blob/master/sensiolabs/security-checker/4.0/manifest.json

------------
Installing Twig - composer require twig
    - config/bundles.php
        return [

            Symfony\Bundle\TwigBundle\TwigBundle::class => ['all' => true],
        ];
        - Bundles are the "plugin" system for Symfony. And whenever we install a third-party bundle, Flex adds it here so that it's used automatically. Thanks Flex!
    - recipe also created some stuff, like a templates/ directory!
        - config/packages/twig.yaml - controlled by this twig.yaml

Using Twig: src/Controller/ArticleController.php
Step 1: extend AbstractController
    use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
        ... lines 7 - 8
    class ArticleController extends AbstractController
    {
        ... lines 11 - 27
    }

Step 2: AbstractController class gives you shortcut methods like render 
    - title is a variable passed to the twig file

class ArticleController extends AbstractController
{

    public function show($slug)
    {
        return $this->render('article/show.html.twig', [
            'title' => ucwords(str_replace('-', ' ', $slug)),
        ]);
    }

    public function showArrary($slug)
    {
        $comments = [
            'I ate a normal rock once. It did NOT taste like bacon!',
            'Woohoo! I\'m going on an all-asteroid diet!',
            'I like bacon too! Buy some from my site! bakinsomebacon.com',
        ];
        return $this->render('article/showarray.html.twig', [
            ... line 31
            'comments' => $comments,
        ]);
    }
}

Step 3: Use the variable, array inside templates/article/show.html.twig, showarray.html.twig: // {{ simple_variable }}, {% arrauy_if %},  {# comments #}
    <h1>{{ title }}</h1> - templates/article/show.html.twig
    <ul> - showarray.html.twig
        {% for comment in comments %}
            <li>{{ comment }}</li>
        {% endfor %}
    </ul>

- Twig Documentation: https://twig.symfony.com/doc/2.x/
    - At the bottom, see tags all of these commands will work with {% do_something %}
    - filters - {{ simple_variable | <filter> | <filter> | etc.}}

Step 4: Template Inheritance 
templates/article/show.html.twig
    <!DOCTYPE html>
    <html>
        <head>
            <title>{% block title %}Welcome!{% endblock %}</title>
        </head>
        <body>
            {% block body %}{% endblock %}
        </body>
    </html>
templates/article/show.html.twig
{% extends 'base.html.twig' %}
{% block title %}Read: {{ title }}{% endblock %}
{% block body %}
    <h1>{{ title }}</h1>
    ... lines 5 - 21
    <ul>
        {% for comment in comments %}
            <li>{{ comment }}</li>
        {% endfor %}
    </ul>
{% endblock %}
    Now our content should go inside of that block in base.html.twig
------------------------
composer require profiler --dev - installs development helpers
    - This installs the GUI helpers
    - and Magic functions: dump(<variables>, <controller||this> )

class ArticleController extends AbstractController
{

    public function show($slug)
    {
        return $this->render('article/show.html.twig', [
            'title' => ucwords(str_replace('-', ' ', $slug)),
        ]);
    }

    public function showArrary($slug)
    {

        $comments = [
            'I ate a normal rock once. It did NOT taste like bacon!',
            'Woohoo! I\'m going on an all-asteroid diet!',
            'I like bacon too! Buy some from my site! bakinsomebacon.com',
        ];

        dump($comments, this);
        return $this->render('article/showarray.html.twig', [
            ... line 31
            'comments' => $comments,
        ]);
    }
}


templates/article/show.html.twig 
{% block body %}
    {{ dump() }}
{% endblock %}
------------------------------- 
composer require debug --dev
    - debug is a pack - it points to composer.json which install a bunch of libraries
    - inside your projects composer.json 
    "require-dev": {
        "symfony/debug-pack": "^1.0",
        "symfony/profiler-pack": "^1.0"
    },
composer unpack debug 
    - removing symfony/debug-pack
    - replaced it with the actual files from composer.json that it references from
    {

        "require-dev": {
            "easycorp/easy-log-handler": "^1.0.2",
            "symfony/debug-bundle": "^3.3|^4.0",
            "symfony/monolog-bundle": "^3.0",
            "symfony/phpunit-bridge": "^3.3|^4.0",
            "symfony/profiler-pack": "^1.0",
            "symfony/var-dumper": "^3.3|^4.0"
        },
    }

-----------------------------
CSS/JS 
rm -rf var/cache/dev/* -  remove the var/cache/dev directory
composer require asset
    -templates/base.html.twig
    <!doctype html>
    <html lang="en">
        <head>
            {% block stylesheets %}
                <link rel="stylesheet" href="{{ asset('css/font-awesome.css') }}">
                <link rel="stylesheet" href="{{ asset('css/styles.css') }}">
            {% endblock %}
        </head>
    </html>
    - whenever you link to a static asset - CSS, JS or images - you should wrap the path in this asset() function. 

-------------------------------
Generating URLs
Example 1:
class ArticleController extends AbstractController
{
    /**
     * @Route("/", name="app_homepage")
     */
    public function homepage()
    {

    }
}

./bin/console debug:router
- to see route internal name 
    - the annotation route name can be viewed and use inside the twig file
    <!doctype html>
    <html lang="en">
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark navbar-bg mb-5">
                <a style="margin-left: 75px;" class="navbar-brand space-brand" href="{{ path('app_homepage') }}">The Space Bar</a>
            </nav>
        </body>
    </html>

Example 2:
class ArticleController extends AbstractController
    {
        /**
        * @Route("/news/{slug}", name="article_show")
        */
        public function show($slug)
        {
        }
    }
 templates/article/homepage.html.twig
    {% block body %}
        <div class="container">
            <div class="row">
                <!-- Article List -->
                <div class="col-sm-12 col-md-8">
                    <!-- Supporting Articles -->
                    <div class="article-container my-1">
                        <a href="{{ path('article_show', {slug: 'why-asteroids-taste-like-bacon'}) }}">
                        </a>
                    </div>
                </div>
            </div>
        </div>
    {% endblock %}
---------------------
JavaScript & Page-Specific Assets
Step 1: Create a JS 
 public/js/article_show.js
    $(document).ready(function() {
        $('.js-like-article').on('click', function(e) {
            e.preventDefault();
            var $link = $(e.currentTarget);
            $link.toggleClass('fa-heart-o').toggleClass('fa-heart');
            $('.js-like-article-count').html('TEST');
        });
    });
Step 2: Add libraries to  footer (just in this example)
templates/base.html.twig
    <!doctype html>
    <html lang="en">
        <body>
            {% block javascripts %}
                <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>
                <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"></script>
            {% endblock %}
        </body>
    </html>
Step 3: Override the JS block in Specific page - use  parent() to append your script
templates/article/show.html.twig
    {% block javascripts %}
         {{ parent() }}
        <script src="{{ asset('js/article_show.js') }}"></script>
    {% endblock %}
---------------------
src/Controller/ArticleController.php
Step 1: Create your GET request route and controller and use JsonResponse -
    JsonResponse is a sub-class of Response. 
    It calls json_encode() for you, and also sets the Content-Type header to application/json, which helps your JavaScript understand things.
use Symfony\Component\HttpFoundation\JsonResponse;
class ArticleController extends AbstractController
{
    /**
     * @Route("/news/{slug}/heart", name="article_toggle_heart")
     */
    public function toggleArticleHeart($slug)
    {
        // TODO - actually heart/unheart the article!
        return new JsonResponse(['hearts' => rand(5, 100)]);
    }
}

Step 2: Change to Post request in this example
class ArticleController extends AbstractController
{

    /**
     * @Route("/news/{slug}/heart", name="article_toggle_heart", methods={"POST"})
     */
    public function toggleArticleHeart($slug)
    {

    }
}
Step 3: templates/article/show.html.twig
- templates/article/show.html.twig: Create a link 
    <a href="{{ path('article_toggle_heart', {slug: slug}) }}" class="fa fa-heart-o like-article js-like-article"></a>
- In your congtroller, create the slug variable 
    class ArticleController extends AbstractController
    {
        public function show($slug)
        {
            return $this->render('article/show.html.twig', [
                'slug' => $slug,
            ]);
        }
    }
Step 4: Add the Ajax post request
public/js/article_show.js
$(document).ready(function() {
    $('.js-like-article').on('click', function(e) {
        $.ajax({
        }).done(function(data) {
            $('.js-like-article-count').html(data.hearts);
        })
    });
});
Step 5: add the js to your block
templates/article/show.html.twig
{% block javascripts %}
        {{ parent() }}
    <script src="{{ asset('js/article_show.js') }}"></script>
{% endblock %}
---------------------
Services
- ./bin/console debug:autowiring
    - shows full list of all of the type-hints that you can use to get a service.

How to use a service For example 1: Psr\Log\LoggerInterface is used a a paramerter to our method $logger
 src/Controller/ArticleController.php
 use Psr\Log\LoggerInterface; 
    class ArticleController extends AbstractController
        {

            /**
            * @Route("/news/{slug}/heart", name="article_toggle_heart", methods={"POST"})
            */
            public function toggleArticleHeart($slug, LoggerInterface $logger)
            {
                $logger->info('Article is being hearted!');
            }
        }
    - tail -f var/log/dev.log - you should see your log
How to use a service For example 2:  using Twig\Environment
- src/Controller/ArticleController.php 
use Symfony\Component\HttpFoundation\Response;
use Twig\Environment;
class ArticleController extends AbstractController
{
    public function show($slug, Environment $twigEnvironment)
    {
        $html = $twigEnvironment->render('article/show.html.twig', [
            'title' => ucwords(str_replace('-', ' ', $slug)),
            'slug' => $slug,
            'comments' => $comments,
        ]);
        return new Response($html);
    }
}
