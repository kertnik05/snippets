<?php//class.Customer.php class Customer {  public $id;  public $customerNumber;  public $name;  public function __construct($customerID) {  //fetch customer infomation from the database  //  //We’re hard coding these values here, but in a real application  //these values would come from a database  $data = array();  $data[‘customerNumber’] = 1000000;  $data[‘name’] = ‘Jane Johnson’;  //Assign the values from the database to this object  $this- > id = $customerID;  $this- > name = $data[‘name’];  $this- > customerNumber = $data[‘customerNumber’];  }}?><?php //class.SweepstakesCustomer.phprequire_once(‘class.Customer.php’);class SweepstakesCustomer extends Customer {  public function __construct($customerID) {    parent::__construct($customerID);    if($this- > customerNumber == 1000000) {      print “Congratulations $this- > name! You ’ re our “ .      “millionth customer!” .      “You win a year’s supply of frozen fish sticks! “;    }  }}/*To call the functionality provided by the parent, use the syntax parent::[ function name ] . When you justwant to add additional behavior to a method, first you call parent::[ function name ] and then add youradditional code. When extending a function in this way, always call the method on the parent before doinganything else.*/?><?php //testCustomer.php require_once(‘class.SweepstakesCustomer.php’);//since this file already includes class.Customer.php, there’s//no need to pull that file in, as well.function greetCustomer(Customer $objCust) {    print “Welcome back to the store $objCust- > name!”;  }//Change this value to change the class used to create this customer object$promotionCurrentlyRunning = true;if ($promotionCurrentlyRunning) {    $objCust = new SweepstakesCustomer(1000000);  } else {    $objCust = new Customer(1000000);  }  greetCustomer($objCust);/*How Inheritance WorksThe Customer class initializes values from the database based on the customer ID. You would mostlikely retrieve the customer ID from a loyalty program swipe card such as the type available at mostlarger grocery store chains. With the customer ID, you can fetch the customer ’ s personal data from thedatabase (just hard - coded in this example), along with an integer value representing how manycustomers have entered the store before that customer. Store all this information in public membervariables.Run testCustomer.php in your browser with the $promotionCurrentlyRunning variable set first tofalse and then to true . When the value is true , the prize message is displayed*/? >