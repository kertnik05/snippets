<?php //interface.Openable.php /* Clases that only share one activities but it's not at all related */ interface Openable {  public function open();  public function close();}?><?php //class.Door.phprequire_once(‘interface.Openable.php’);class Door implements Openable {  private $_locked = false;  public function open() {    if($this- > locked) {    print “Can’t open the door. It’s locked.”;  } else {    print “creak... < br > ”;  }  }  public function close() {    print “Slam!! < br > ”;  }  public function lockDoor() {    $this- > locked = true;  }  public function unlockDoor() {    $this- > locked = false;  }}?><? php //class.Jar.php require_once(‘interface.Openable.php’);class Jar implements Openable {  private $contents;  public function __construct($contents) {    $this- > contents = $contents;  }  public function open() {    print “the jar is now open < br > ”;  }  public function close() {    print “the jar is now closed < br > ”;  }}?><?php //To use these files, create a new file called testOpenable.php in the same directory:require_once(‘class.Door.php’);require_once(‘class.Jar.php’);function openSomething(Openable $obj) {    $obj- > open();  }$objDoor = new Door();$objJar = new Jar(“jelly”);openSomething($objDoor);openSomething($objJar);?><?php/*Because both the Door class and the Jar class implement the Openable interface, you can pass both tothe openSomething() function. Because that function accepts only something that implements theOpenable interface, you know that you can call the functions open() and close() within it. However,you should not attempt to access the contents property of the Jar class or utilize the lock() orunlock() functions of the Door class within the openSomething() function, because that property andthose methods are not part of the interface. The interface contract guarantees that you have open() andclose() and nothing else.By using interfaces in your application, you can allow completely different and unrelated objects to talkto each other with a guarantee that they will be able to interact on the terms specified in the interface.The interface is a contract to provide certain methods.*/?>