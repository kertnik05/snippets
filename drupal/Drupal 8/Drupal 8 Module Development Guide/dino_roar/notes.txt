dino_roar.info.yml 
dino_roar.routing.yml - 
    dino_says: // Internal Name
        path: /the/dino/says/{count}
        defaults:                     
            _controller: Drupal\dino_roar\Controller\RoarController::roar  //namespace\class::method
        requirements:
            _permission: 'access content'

 dino_roar/src/Controller/RoarController.php

        namespace Drupal\dino_roar\Controller;  //Drupal\module_name\folder_inside_src

        use Drupal\Core\Controller\ControllerBase;
        use Drupal\Core\Logger\LoggerChannelFactoryInterface;
        use Drupal\dino_roar\Jurassic\RoarGenerator;
        use Symfony\Component\DependencyInjection\ContainerInterface;
        use Symfony\Component\HttpFoundation\Response;

        class RoarController extends ControllerBase //RoarController is the classname 
        {
            /**
            * @var RoarGenerator
            */
            private $roarGenerator;

            /**
            * @var LoggerChannelFactoryInterface
            *
            * Renamed from loggerFactory to loggerFactoryService to not
            * conflict with a new loggerFactory service on ControllerBase
            * in Drupal 8.1!
            */
            private $loggerFactoryService;

            public function __construct(RoarGenerator $roarGenerator, LoggerChannelFactoryInterface $loggerFactory)
            {
                $this->roarGenerator = $roarGenerator;
                $this->loggerFactoryService = $loggerFactory;
            }

            public static function create(ContainerInterface $container)
            {
                $roarGenerator = $container->get('dino_roar.roar_generator');
                $loggerFactory = $container->get('logger.factory');

                return new static($roarGenerator, $loggerFactory);
            }

            public function roar($count) //$count comes from path
            {
                $roar = $this->roarGenerator->getRoar($count);
                $this->loggerFactoryService->get('default')
                    ->debug($roar);

                return [
                    '#title' => $roar
                ];
            }
        }

/********** Debugging *************/

//$ Drupal  - command line utility
$ drupal cache:rebuild
$ drupal router:debug //show's route name
$ drupal router:debug paste_router_name 
$ drupal container:debug 
$ drupal container:debug | grep enter_service_name
$ drupal generate:service
$ drupal generate:controller
$ drupal generate:module


//devdesktop/drupal-8/sites/example.settings.local.php, and desktop/drupal-8/sites/example.sites.php, and devdesktop/drupal-8/sites/default - permissions 755

devdesktop/drupal-8/sites/example.settings.local.php
    $config['system.logging']['error_level'] = 'verbose'; //Activate Debugging

Install Drupal Devel
 - enable devel web profiler //display the debugging GUI at the bottom of the page
 - click web profiler and edit configuration
 - Click the Gear with 200 - to see which controller is running
