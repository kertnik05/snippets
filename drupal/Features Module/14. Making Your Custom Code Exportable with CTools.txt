Chaos tool suite

https://www.drupal.org/project/ctools
Plugins -- tools to make it easy for modules to let other modules implement plugins from .inc files.
Exportables -- tools to make it easier for modules to have objects that live in database or live in code, such as 'default views'.

Read: site/all/modules/ctools/help/export.html

Step 1: 
place this in the .install file of your module

just add the code
    'export' => array(
      'key' => 'name',
      'key name' => 'Badge Name', - human readable name 
      'primary key' => 'bid', - relates to the primary key of the module (to find out if it exist on database or in code)
      'default hook' => 'modulename_info',  // Function hook name.
      'api' => array(
        'owner' => 'modulename',
        'api' => 'modulename',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),

Step 2: 
place this in the .module file of your module

function modulename_ctools_plugin_directory ($module, $plugin) {
	//support for CTools exportable
	if ($plugin == 'export_ui') {
		//location of the ctools plugin files relative to the module's root
		//directory
		return 'plugins/export_ui'; 
		
	}
}


Step 4: 
Read: site/all/modules/ctools/help/export-ui.html
Create a folder : modulename/plugins/export_ui
Create a file inside modulename/plugins/export_ui: modulename_plugins_export_ui.inc

paste this code inside:

$plugin = array(
  // The name of the table as found in the schema in hook_install. This
  // must be an exportable type with the 'export' section defined.
  'schema' => 'tablename', //normally the table name is the same as the module

  // The access permission to use. If not provided it will default to
  // 'administer site configuration'
  'access' => 'administer example', //what the user permission will be

  // You can actually define large chunks of the menu system here. Nothing
  // is required here. If you leave out the values, the prefix will default
  // to admin/structure and the item will default to the plugin name.
  'menu' => array(
    'menu prefix' => 'admin/config/people', //url you want to use to do CRUD of the object 
    'menu item' => 'modulename', // for user navigation
    // Title of the top level menu. Note this should not be translated,
    // as the menu system will translate it.
    'menu title' => 'Modulename', // for user navigation
    // Description of the top level menu, which is usually needed for
    // menu items in an administration list. Will be translated
    // by the menu system.
    'menu description' => 'Administer site example objects.',
  ),

  // These are required to provide proper strings for referring to the
  // actual type of exportable. "proper" means it will appear at the
  // beginning of a sentence.
  'title singular' => t('modulename'), //
  'title singular proper' => t('Modulename'),
  'title plural' => t('modulenames'),
  'title plural proper' => t('Modulenames'),

  // This will provide you with a form for editing the properties on your
  // exportable, with validate and submit handler.
  //
  // The item being edited will be in $form_state['item'].
  //
  // The submit handler is only responsible for moving data from
  // $form_state['values'] to $form_state['item'].
  //
  // All callbacks will accept &$form and &$form_state as arguments.
  'form' => array(
    'settings' => 'modulename_ctools_export_ui_form', //callback functions
    'validate' => 'modulename_ctools_export_ui_form_validate',
    'submit' => 'modulename_ctools_export_ui_form_submit',
  ),

);


function modulename_ctools_export_ui_form (&$form, &$form_state{
 dsm($form, form); // outputs information from step 1
 dsm($form_state, form_state); //ctool adds the item array
}

Step 5: 
Enable the module 

Step 6:
Visit: admin/config/people


Step 7:

function modulename_ctools_export_ui_form (&$form, &$form_state{
	$form['text'] = array (
		'#type' => 'textfield',
		'#title' =>t('Badge text'),
		'#default_value' => isset($badge->text) ? $badge->text : $badge->text,
		'#required' =>TRUE,
	);
	$form['color'] = array (
		'#type' => 'textfield',
		'#title' =>t('Badge Color'),
		'#description' =>t('Hex color of the badge'),
		'#field_prefix' =>t('#'),
		'#default_value' => isset($badge->color) ? $badge->color : $badge->color,
		'#required' =>TRUE,
	);
}

Step 8:
add a new badge
when clicking save on the form

Stops at 56%
Continue..